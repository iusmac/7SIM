import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext {
        // https://mvnrepository.com/artifact/androidx.room/room-compiler
        // https://mvnrepository.com/artifact/androidx.room/room-runtime
        // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/room/room-compiler/
        // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/room/room-runtime/
        def room_version = '2.5.0-alpha01'
        // https://mvnrepository.com/artifact/com.google.dagger/hilt-android
        // https://mvnrepository.com/artifact/com.google.dagger/hilt-compiler
        // https://android.googlesource.com/platform/external/dagger2
        def hilt_version = '2.35.1'
        libs = [
            // https://mvnrepository.com/artifact/androidx.annotation/annotation
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/annotation/annotation/
            annotation           :  'androidx.annotation:annotation:1.6.0-rc01',
            // https://mvnrepository.com/artifact/androidx.appcompat/appcompat
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/appcompat/appcompat/
            appcompat            :  'androidx.appcompat:appcompat:1.6.0-alpha05',
            // https://mvnrepository.com/artifact/androidx.collection/collection
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/collection/collection/
            collection           :  'androidx.collection:collection:1.3.0-alpha01',
            // https://mvnrepository.com/artifact/androidx.coordinatorlayout/coordinatorlayout
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/coordinatorlayout/coordinatorlayout/
            coordinatorlayout    :  'androidx.coordinatorlayout:coordinatorlayout:1.2.0',
            // https://mvnrepository.com/artifact/androidx.core/core
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/core/core/
            core                 :  'androidx.core:core:1.9.0-alpha05',
            hilt_android         :  "com.google.dagger:hilt-android:$hilt_version",
            hilt_compiler        :  "com.google.dagger:hilt-compiler:$hilt_version",
            // https://mvnrepository.com/artifact/androidx.lifecycle/lifecycle-livedata
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/lifecycle/lifecycle-livedata/
            livedata             :  'androidx.lifecycle:lifecycle-livedata:2.5.0-alpha03',
            // https://mvnrepository.com/artifact/com.google.android.material/material
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/extras/material-design-x/com/google/android/material/material/
            material             :  'com.google.android.material:material:1.7.0-alpha03',
            // https://mvnrepository.com/artifact/androidx.preference/preference
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/preference/preference/
            preference           :  'androidx.preference:preference:1.2.0-alpha01',
            room_compiler        :  "androidx.room:room-compiler:$room_version",
            room_runtime         :  "androidx.room:room-runtime:$room_version",
            // https://mvnrepository.com/artifact/androidx.lifecycle/lifecycle-viewmodel
            // https://android.googlesource.com/platform/prebuilts/sdk/+/refs/heads/main/current/androidx/m2repository/androidx/lifecycle/lifecycle-viewmodel/
            viewmodel            :  'androidx.lifecycle:lifecycle-viewmodel:2.5.0-alpha03'
        ]
    }
}

plugins {
    // https://mvnrepository.com/artifact/com.android.application/com.android.application.gradle.plugin
    id 'com.android.application' version '8.1.4' apply false
    // https://mvnrepository.com/artifact/com.android.library/com.android.library.gradle.plugin
    id 'com.android.library' version '8.1.4' apply false
    // https://plugins.gradle.org/plugin/org.jetbrains.kotlin.android
    id 'org.jetbrains.kotlin.android' version '1.9.22' apply false
}

allprojects {
    plugins.withType(JavaBasePlugin).configureEach {
        java {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(17))
            }
        }
    }

    ext {
        addCompileOnlyJar = { String name ->
            final def jars_dir = "$rootDir/prebuilts/jars"
            final def jar = new File(jars_dir, name)
            if (!jar.exists()) {
                throw new IllegalArgumentException("Cannot find prebuilt '${jar.path}' file.")
            }
            gradle.projectsEvaluated {
                tasks.withType(JavaCompile).configureEach {
                    classpath = files(jar, classpath)
                }
                tasks.withType(KotlinCompile).configureEach {
                    libraries.from(files(jar))
                }
            }
            dependencies {
                compileOnly files(jar)
            }
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

final def versionNameCommon = [file('version.txt').text.trim()]
if (System.getenv('EXTRA_VERSION_BUILD_INFO') == null) {
    final def tag = 'v' + versionNameCommon[0]
    final def (semver, commitsSinceLastTag, headCommit) = gitDescribeTag(tag, 'HEAD')
    versionNameCommon.add('git branch --show-current'.execute([], project.rootDir).text.trim())
    versionNameCommon.add(String.format('%s+%s', headCommit, commitsSinceLastTag))
} else {
    final def extraVersionBuildInfo = System.getenv('EXTRA_VERSION_BUILD_INFO').trim()
    if (!extraVersionBuildInfo.isEmpty()) {
        versionNameCommon.add(extraVersionBuildInfo)
    }
}

android {
    namespace 'com.github.iusmac.sevensim'

    defaultConfig {
        applicationId 'com.github.iusmac.sevensim'
        targetSdk 33
        versionCode versionNameCommon[0].replaceAll(/\D/, '') as Integer // "x.y.z" => xyz
    }

    applicationVariants.all { variant ->
        final def versionNameVariant = versionNameCommon.clone()
        if (variant.buildType.isDebuggable()) {
            versionNameVariant.add('DEBUG')
        } else if (isReleaseDebugOpt()) {
            versionNameVariant.add('DEBUG-OPT')
        }
        variant.outputs.each { output ->
            final def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                final semVer = versionNameCommon[0]
                output.outputFileName = String.format('%s-%s-%s.apk', project.name, semVer,
                        variant.buildType.name)
            }
            output.versionNameOverride = versionNameVariant.join(' / ')
        }
    }

    final def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(file('keystore.properties')))
    def releaseSigning = signingConfigs.create('release') {
        keyAlias keystoreProperties['keyAlias']
        keyPassword keystoreProperties['keyPassword']
        storeFile file(keystoreProperties['storeFile'])
        storePassword keystoreProperties['storePassword']
    }

    buildTypes {
        all {
            buildConfigField 'boolean', 'DEBUG_OPT', 'false'
            signingConfig releaseSigning
        }
        release {
            buildConfigField 'boolean', 'DEBUG_OPT', isReleaseDebugOpt().toString()
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.flags'
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            manifest.srcFile 'AndroidManifest.xml'
        }
    }

    lint {
        // Instead of failing the build due to missing translations, just inform us to avoid
        // mistakes during manual import
        informational 'MissingTranslation'
    }

    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }

    packagingOptions.resources.excludes += [
        "**/*.bin",
        "**/*.properties",
        "**/*.version",
        "kotlin/**",
        "META-INF/services/**",
        "META-INF/com/**",
    ]
}

addCompileOnlyJar('android-33.jar')

dependencies {
    implementation libs.annotation
    implementation libs.collection
    implementation libs.core
    implementation libs.livedata
    implementation libs.material
    implementation libs.preference
    implementation libs.viewmodel
    implementation libs.hilt_android
    kapt libs.hilt_compiler

    implementation libs.room_runtime
    kapt libs.room_compiler

    implementation project(path: ':SettingsLib')
}

kapt {
    correctErrorTypes true
}

/**
 * Describe the tag relative to a commit-ish using "git describe".
 *
 * The result from the git describe command will be transformed as follows:
 * "TAG-N-g<commit-ish>" = ["TAG", "N", "commit-ish"]
 * "<commit-ish>"        = [null, 0, "commit-ish"]
 */
def gitDescribeTag(final String pattern, final String commitIsh) {
    final def describedTag = String.format('git describe --always --tags --match=%s %s', pattern,
            commitIsh).execute([], project.rootDir).text.trim().split('-')
    final def tag, commitsSinceLastTag
    def headCommit
    if (describedTag.size() > 1) {
        tag = describedTag[0..-3].join('-')
        (commitsSinceLastTag, headCommit) = describedTag[-2..-1]
        headCommit = headCommit.substring(1)
    } else {
        tag = null
        headCommit = describedTag[0]
        commitsSinceLastTag = 0
    }
    return [tag, commitsSinceLastTag, headCommit]
}

/**
 * Check whether it was asked to opt-in for debug logging on releases with R8.
 *
 * The output of this function is determined via:
 * - Gradle argument: -PreleaseDebugOpt=[true|false]
 * - Environment variable: RELEASE_DEBUG_OPT=[true|false]
 *
 * Boolean as Integer is allowed.
 */
def isReleaseDebugOpt() {
    final def String debugOpt = [
        System.getenv('RELEASE_DEBUG_OPT'),
        project.properties.releaseDebugOpt
    ]
    return debugOpt.contains('1') || debugOpt.contains('true')
}
